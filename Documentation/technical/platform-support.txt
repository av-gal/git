Platform Support Policy
=======================

Git has a history of providing broad "support" for exotic platforms and older
platforms, without an explicit commitment. This support becomes easier to
maintain (and possible to commit to) when Git developers are provided with
adequate tooling to test for compatibility. Various levels of tooling will
allow us to make more solid commitments around Git's compatibility with your
platform.

Compatible by next release
--------------------------

To increase probability that compatibility issues introduced in a release
will be fixed in a later release:

* You should send a bug report as soon as you notice the breakage on your
platform. The sooner you notice, the better; watching `seen` means you can
notice problems before they are considered "done with review"; whereas watching
`master` means the stable branch could break for your platform, but you have a
decent chance of avoiding a tagged release breaking you. See "The Policy" in the
link:../howto/maintain-git.txt[maintainer's guide] for an overview of which
branches are used in git.git, and how.
* The bug report should include information about what platform you are using.
* You should also use linkgit:git-bisect[1] and determine which commit
introduced the breakage.
* Please include any information you have about the nature of the breakage: is
it a memory alignment issue? Is an underlying library missing or broken for
your platform? Is there some quirk about your platform which means typical
practices (like malloc) behave strangely?
* Once we begin to fix the issue, please work closely with the contributor
working on it to test the proposed fix against your platform.

Example: NonStop
https://lore.kernel.org/git/01bd01da681a$b8d70a70$2a851f50$@nexbridge.com/[reports
problems] when they're noticed.

Compatible on `master` and point releases
-----------------------------------------

To guarantee that `master` and all point releases work for your platform the
first time:

* You should run nightly tests against the `next` branch and publish breakage
reports to the mailing list immediately when they happen.
** You may want to ask to join the mailto:git-security@googlegroups.com[security
mailing list] in order to run tests against the fixes proposed there, too.
* It may make sense to automate these; if you do, make sure they are not noisy
(you don't need to send a report when everything works, only when something
breaks).
* Breakage reports should be actionable - include clear error messages that can
help developers who may not have access to test directly on your platform.
* You should use git-bisect and determine which commit introduced the breakage;
if you can't do this with automation, you should do this yourself manually as
soon as you notice a breakage report was sent.
* You should either:
** Provide VM access on-demand to a trusted developer working to fix the issue,
so they can test their fix, OR
** Work closely with the developer fixing the issue; the turnaround to check
that their proposed fix works for your platform should be fast enough that it
doesn't hinder the developer working on that fix. Slow testing turnarounds may
cause the fix to miss the next release, or the developer may lose interest in
working on the fix at all.

Example:
https://lore.kernel.org/git/CAHd-oW6X4cwD_yLNFONPnXXUAFPxgDoccv2SOdpeLrqmHCJB4Q@mail.gmail.com/[AIX]
provides a build farm and runs tests against release candidates.

Compatible on `next`
--------------------

To guarantee that `next` will work for your platform, avoiding reactive
debugging and fixing:

* You should add a runner for your platform to the GitHub Actions CI suite.
This suite is run when any Git developer proposes a new patch, and having a
runner for your platform/configuration means every developer will know if they
break you, immediately.
** If adding it to GitHub Actions is infeasible (due to architecture constraints
or for performance reasons), any other method which runs as automatically and
quickly as possible works, too. For example, a service which snoops on the
mailing list and automatically runs tests on new [PATCH] emails, replying to the
author with the results, would also be within the spirit of this requirement.
* If you rely on Git avoiding a specific pattern that doesn't work well with
your platform (like a certain malloc pattern), raise it on the mailing list.
There are a few ways to avoid these breakages, so we'll work case-by-case to
find a solution that doesn't unnecessarily constrain other platforms to keep
compatibility with yours.
* If you rely on some configuration or behavior, add a test for it.  Untested
behavior is subject to breakage at any time.
** Clearly label these tests as necessary for platform compatibility. Add them
to an isolated compatibility-related test suite, like a new t* file or unit test
suite, so that they're easy to remove when compatibility is no longer required.
If the specific compatibility need is gated behind an issue with another
project, link to documentation of that issue (like a bug or email thread) to
make it easier to tell when that compatibility need goes away.
** Include a comment with an expiration date for these tests no more than 1 year
from now. You can update the expiration date if your platform still needs that
assurance down the road, but we need to know you still care about that
compatibility case and are working to make it unnecessary.

Example: We run our
https://git.kernel.org/pub/scm/git/git.git/tree/.github/workflows/main.yml[CI
suite] on Windows, Ubuntu, Mac, and others.

Getting help writing platform support patches
---------------------------------------------

In general, when sending patches to fix platform support problems, follow
these guidelines to make sure the patch is reviewed with the appropriate level
of urgency:

* Clearly state in the commit message that you are fixing a platform breakage,
and for which platform.
* Use the CI and test suite to ensure that the fix for your platform doesn't
break other platforms.
* If possible, add a test ensuring this regression doesn't happen again. If
it's not possible to add a test, explain why in the commit message.

Minimum Requirements
--------------------

Even if platform maintainers are willing to add tests or CI runners, we will
not consider helping to support platforms that do not meet these minimum
requirements:

* Has C99 or C11
* Has dependencies which were released in the past 10 years
* Has active security support (taking security releases of dependencies, etc)

Platform Maintainers
--------------------

If you maintain a platform, or Git for that platform, and intend to work with
the Git project to ensure compatibility, please send a patch to add yourself to
this list.

NonStop: Randall S. Becker <rsbecker@nexbridge.com>
